#include "imports/stdlib.fc";
;; #include "fun_pull.fc";


(cell, cell, cell, cell, cell, cell, slice, slice) load_data() impure {
    slice ds = get_data().begin_parse();
    return (
        ds~load_ref(),
        ds~load_ref(),
        ds~load_ref(),
        ds~load_ref(),
        ds~load_ref(),
        ds~load_ref(),
        ds~load_msg_addr(),
        ds~load_msg_addr()
    );
}

() save_data(
    cell CommitteeFeed, 
    cell CommitteeFeedWithProof, 
    cell PriceDetailsWithCommittee, 
    cell OracleProofV2, 
    cell PriceData, 
    cell PriceInfo, 
    slice supraSValueFeed, 
    slice supraSValueVerifier
    ) impure {
    set_data(begin_cell()
             .store_ref(CommitteeFeed)
             .store_ref(CommitteeFeedWithProof)
             .store_ref(PriceDetailsWithCommittee)
             .store_ref(OracleProofV2)
             .store_ref(PriceData)
             .store_ref(PriceInfo)
             .store_slice(supraSValueFeed)
             .store_slice(supraSValueVerifier)
             .end_cell()
    );
}


(slice) packData(int _pair, int _round, int _decimals, int _time, int _price) impure {
    int r = _round << 192;
    r = r | _decimals << 184;
    r = r | _time << 120;
    r = r | _price << 24;
    cell c = begin_cell().store_uint(r, 256).end_cell();
    ;; slice result = r.load_ref();
    return c.begin_parse();
}

(int) _ensureNonZeroAddress(slice _contractAddress) method_id {
    return _contractAddress.slice_data_empty?();
}

() updateSupraSValueFeed(slice _supraSValueFeed) impure {
        (
            cell CommitteeFeed, 
            cell CommitteeFeedWithProof, 
            cell PriceDetailsWithCommittee, 
            cell OracleProofV2, 
            cell PriceData, 
            cell PriceInfo, 
            slice supraSValueFeed, 
            slice supraSValueVerifier
            ) = load_data();
            
            _ensureNonZeroAddress(_supraSValueFeed);
            supraSValueFeed = _supraSValueFeed;
}

() updateSupraSValueVerifier(slice _supraSValueVerifier) impure {
        (
            cell CommmitteeFeed,
            cell CommitteeFeedWithProof,
            cell PriceDetailsWithCommittee,
            cell OracleProofV2,
            cell PriceData,
            cell PriceInfo,
            slice supraSValueFeed,
            slice supraSValueVerifier
        ) = load_data();

        _ensureNonZeroAddress(_supraSValueVerifier);
        supraSValueVerifier = _supraSValueVerifier;
}

() _updateSupraSValueFeedInitLevel(slice _supraSValueFeed) impure {
        (
            cell CommitteeFeed, 
            cell CommitteeFeedWithProof, 
            cell PriceDetailsWithCommittee, 
            cell OracleProofV2, 
            cell PriceData, 
            cell PriceInfo, 
            slice supraSValueFeed, 
            slice supraSValueVerifier
            ) = load_data();
            
            _ensureNonZeroAddress(_supraSValueFeed);
            supraSValueFeed = _supraSValueFeed;
}

() _updateSupraSValueVerifierInitLevel(slice _supraSValueVerifier) impure {
        (
            cell CommmitteeFeed,
            cell CommitteeFeedWithProof,
            cell PriceDetailsWithCommittee,
            cell OracleProofV2,
            cell PriceData,
            cell PriceInfo,
            slice supraSValueFeed,
            slice supraSValueVerifier
        ) = load_data();
        
        _ensureNonZeroAddress(_supraSValueVerifier);
        supraSValueVerifier = _supraSValueVerifier;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if(in_msg_body.slice_empty?()) {
        return();
    }

    int op = in_msg_body~load_uint(32);
     int _pair = in_msg_body~load_uint(256);
     int _round = in_msg_body~load_uint(256);
     int _decimals = in_msg_body~load_uint(256);
     int _time = in_msg_body~load_uint(256);
     int _price = in_msg_body~load_uint(256);
     
    if (op == 1) {
        (cell CommitteFeed, cell CommitteFeedWithProof, cell PriceDetailsWithCommitte, cell OracleProofV2, cell PriceData, cell PriceInfo, slice supraSValueFeed, slice supraSValueVerifier) = load_data();
       
        slice r = packData(_pair, _round, _decimals, _time, _price);
        
        cell msg_body = begin_cell()
                         .store_uint(_pair, 256)
                         .store_slice(r)
                         .end_cell();
        
        send_raw_message(msg_body,0);
    } elseif (op == 2) {
        slice s = in_msg_body~load_msg_addr();
        updateSupraSValueFeed(s);
    } elseif (op == 3) {
        slice s = in_msg_body~load_msg_addr();
        updateSupraSValueVerifier(s);
    } elseif (op == 4) {
        slice s = in_msg_body~load_msg_addr();
        _updateSupraSValueFeedInitLevel(s);
    } elseif (op == 5) {
        slice s = in_msg_body~load_msg_addr();
        _updateSupraSValueVerifierInitLevel(s);
    }
}

() verifyOracleProof(slice _bytes) impure {
    
}

(slice) checkSupraSValueVerifier() method_id {
    (
            cell CommmitteeFeed,
            cell CommitteeFeedWithProof,
            cell PriceDetailsWithCommittee,
            cell OracleProofV2,
            cell PriceData,
            cell PriceInfo,
            slice supraSValueFeed,
            slice supraSValueVerifier
        ) = load_data();

        return supraSValueVerifier;
}

(slice) checkSupraSValueFeed() method_id {
    (
            cell CommmitteeFeed,
            cell CommitteeFeedWithProof,
            cell PriceDetailsWithCommittee,
            cell OracleProofV2,
            cell PriceData,
            cell PriceInfo,
            slice supraSValueFeed,
            slice supraSValueVerifier
        ) = load_data();

        return supraSValueFeed;
}