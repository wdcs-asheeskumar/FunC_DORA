#include "imports/stdlib.fc";

const int ROUND = 0xffffffffffffffff000000000000000000000000000000000000000000000000;
const int DECIMAL = 0x0000000000000000ff0000000000000000000000000000000000000000000000;
const int TIMESTAMP = 0x000000000000000000ffffffffffffffff000000000000000000000000000000;
const int PRICE = 0x0000000000000000000000000000000000ffffffffffffffffffffffff000000;
const int HCC = 0x0000000000000000000000000000000000000000000000000000000000ff0000;
const int MAX_DECIMAL = 18;

(cell, cell, cell, cell, slice, slice) load_data() impure {
    slice ds = get_data().begin_parse();
    return (
        ds~load_ref(),
        ds~load_ref(),
        ds~load_ref(),
        ds~load_ref(),
        ds~load_msg_addr(),
        ds~load_msg_addr()
    );
}

() save_data(cell priceFeed, cell derivedData, cell derivedPair, slice supraSValueFeedVerifier, slice supraPull) impure {
    cell my_dict = new_dict();
    set_data(
        begin_cell()
        .store_ref(priceFeed) 
        .store_ref(derivedData)
        .store_ref(derivedPair)
        .store_ref(my_dict)
        .store_slice(supraSValueFeedVerifier)
        .store_slice(supraPull)
        .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    int op = in_msg_body~load_uint(32);
    cell cell_ref = in_msg_body~load_ref();
    slice _bytes = cell_ref.begin_parse();
       if(op == 1) {
            (cell priceFeed, cell derivedData, cell derivedPair, cell my_dict, slice supraSValueFeedVerifier, slice supraPull) = load_data();
            int _tradingPair = in_msg_body~load_uint(256);
            save_restrictedSetSupraStorage(_tradingPair, _bytes);
            return();
       }
}

() save_restrictedSetSupraStorage(int _tradingPair, slice _bytes) impure   {
    (cell priceFeed, cell derivedData, cell derivedPair, cell my_dict, slice supraSValueFeedVerifier, slice supraPull) = load_data();
    slice key_slice = begin_cell().store_uint(_tradingPair, 256).end_cell().begin_parse();
    my_dict = dict_set(my_dict,256, key_slice, _bytes);
    set_data(begin_cell().store_ref(my_dict).end_cell());
}

() updateSupraSValueFeedVerifier(slice _supraSValueFeedVerifier) impure  {
    (cell priceFeed, cell derivedData, cell derivedPairs, cell my_dict, slice supraSValueFeedVerifier, slice supraPull) = load_data();
    supraSValueFeedVerifier = _supraSValueFeedVerifier;
    ;; save_data(priceFeed, derivedData, derivedPairs, my_dict, supraSValueFeedVerifier, supraPull);
}

() updateSupraPull(slice _supraPull) impure {
    (cell priceFeed, cell derivedData, cell derivedPairs, cell my_dict, slice supraSValueFeedVerifier, slice supraPull) = load_data();
    supraPull = _supraPull;
}



(int) save_scalePrice(int price, int decimal) inline {
    (cell priceFeed, cell derivedData, cell derivedPair, cell my_dict, slice supraSValueFeedVerifier, slice supraPull) = load_data();
    slice s = priceFeed.begin_parse();
    decimal = s~load_uint(256);
    if(decimal == 18){
        return price;
    } else {
        int x = 1;
        int diff = 18 - decimal;
        repeat(diff){
            x = x * 10;
        }
        return price * x;
    }
}

(int, int, int, int) save_unpackedData(int data) inline {
    int price = (data & PRICE) >> 24;
    int timestamp = (data & TIMESTAMP) >> 120;
    int decimal = (data & DECIMAL >> 184);
    int round = (data & ROUND) >> 192;
    return (price, timestamp, decimal, round);
}

(cell) getDerivedSvalue(int pair_id_1, int pair_id_2, int operation) method_id  {
    (cell priceFeed, cell derivedData, cell derivedPair, cell my_dict, slice supraSValueFeedVerifier, slice supraPull) = load_data();
    slice key_slice1 = begin_cell().store_uint(pair_id_1, 256).end_cell().begin_parse();
    slice key_slice2 = begin_cell().store_uint(pair_id_2, 256).end_cell().begin_parse();
    (slice value_slice1, int result1) = udict_get?(my_dict,256,pair_id_1);
    (slice value_slice2, int result2) = udict_get?(my_dict,256,pair_id_2);
    int value1 = value_slice1~load_uint(256);
    int value2 = value_slice2~load_uint(256);
    (int price_1, int timestamp_1, int decimal_1, int round_1) = save_unpackedData(value1);
    (int price_2, int timestamp_2, int decimal_2, int round_2) = save_unpackedData(value2);
    int derivedPrice = 0;
    if (operation == 0) {
        if (decimal_1 + decimal_2 > MAX_DECIMAL) {
            int temp = 1;
            repeat((decimal_1 + decimal_2) - MAX_DECIMAL) {
                temp = temp * 10; 
            }
            derivedPrice = (price_1 * price_2)/ temp;
        } 
        else {
            int temp = 1;
            repeat(MAX_DECIMAL - (decimal_1 + decimal_2)) {
                temp = temp * 10;
            }
            derivedPrice = (price_1 * price_2)/ temp;
        }
    } elseif (operation == 1) {
        int temp = 1;
        repeat(MAX_DECIMAL) {
            temp = temp * 10;
        }
        derivedPrice = (save_scalePrice(price_1,decimal_1) * temp)/(save_scalePrice(price_2,decimal_2));   
    }
    
    slice s = derivedData.begin_parse();
    int temp = round_1 - round_2;

    cell newDerivedCell = begin_cell()
                          .store_uint(temp, 256)
                          .store_uint(derivedPrice, 256)
                          .store_uint(MAX_DECIMAL, 256)
                          .end_cell();

    derivedData = newDerivedCell;
    return derivedData;
}

(int, int, int, int) getSValue(int _pairIndex) method_id {
    (int price, int timestamp, int decimal, int round) = save_unpackedData(_pairIndex);
    return (price, timestamp, decimal, round);
}

(int) getRound(int _tradingPair) method_id {
    (cell priceFeed, cell derivedData, cell derivedPair, cell my_dict, slice supraSValueFeedVerifier, slice supraPull) = load_data();
    slice key_slice = begin_cell().store_uint(_tradingPair, 256).end_cell().begin_parse();
    (slice value_slice, int result) = udict_get?(my_dict,256,_tradingPair);
    int value = value_slice~load_uint(256);
    value = (value & ROUND) >> 192;
    return value;
}

(int) getTimestamp(int _tradingPair) method_id {
    (cell priceFeed, cell derivedData, cell derivedPair, cell my_dict, slice supraSValueFeedVerifier, slice supraPull) = load_data();
    slice key_value = begin_cell().store_uint(_tradingPair, 256).end_cell().begin_parse();
    (slice value_slice, int result) = udict_get?(my_dict,256,_tradingPair);
    int value = value_slice~load_uint(256);
    int value = (value & TIMESTAMP) >> 120;
    return value;
}

(slice, int) getSvalue(int _pairIndex) method_id {
    (cell priceFeed, cell derivedData, cell derivedPair, cell my_dict, slice supraSValueFeedVerifier, slice supraPull) =  load_data();
    slice key_slice = begin_cell().store_uint(_pairIndex, 256).end_cell().begin_parse();
    (slice value_slice, int result) = udict_get?(my_dict,256,_pairIndex);
    return (value_slice, result);
}

